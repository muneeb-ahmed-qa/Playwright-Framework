name: Main Test Suite

on:
  workflow_dispatch:
  schedule:
    - cron: '0 16 * * *' # 2:00AM AEST

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      MAIN_USER_AU_ENCRYPTED_PASSWORD: ${{ secrets.MAIN_USER_AU_ENCRYPTED_PASSWORD }}
      MAIN_USER_EU_ENCRYPTED_PASSWORD: ${{ secrets.MAIN_USER_EU_ENCRYPTED_PASSWORD }}
      TCU_AU_ENCRYPTED_PASSWORD: ${{ secrets.TCU_AU_ENCRYPTED_PASSWORD }}
      REC_AU_USER_ENCRYPTED_PASSWORD: ${{ secrets.REC_AU_USER_ENCRYPTED_PASSWORD }}
      REFERENCE_EU_USER_ENCRYPTED_PASSWORD: ${{ secrets.REFERENCE_EU_USER_ENCRYPTED_PASSWORD }}
      REFERENCE_USER_ENCRYPTED_PASSWORD: ${{ secrets.REFERENCE_USER_ENCRYPTED_PASSWORD }}
      PULSE_AU_USER_ENCRYPTED_PASSWORD: ${{ secrets.PULSE_AU_USER_ENCRYPTED_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create credentials.json
        run: echo '${{ secrets.CREDENTIALS_JSON }}' > credentials.json

      - name: Create token.json
        run: echo '${{ secrets.TOKEN_JSON }}' > token.json

      - name: Run Main Test Suite
        run: npm run test:main || true

      - name: Debug report
        run: |
          echo "=== Checking playwright-report directory ==="
          ls -la playwright-report/ || echo "playwright-report directory not found"
          echo ""
          echo "=== Checking report.json content ==="
          if [ -f "playwright-report/report.json" ]; then
            echo "report.json exists, size: $(wc -c < playwright-report/report.json) bytes"
            echo ""
            echo "=== Report structure analysis ==="
            echo "Total suites: $(jq '.suites | length' playwright-report/report.json)"
            echo "Total specs: $(jq '[.suites[].specs[]] | length' playwright-report/report.json)"
            echo "Total tests: $(jq '[.suites[].specs[].tests[]] | length' playwright-report/report.json)"
            echo ""
            echo "=== Suite titles ==="
            jq -r '.suites[].title' playwright-report/report.json || echo "No suites found"
            echo ""
            echo "=== Spec titles ==="
            jq -r '.suites[].specs[].title' playwright-report/report.json || echo "No specs found"
            echo ""
            echo "=== Test titles ==="
            jq -r '.suites[].specs[].tests[].title' playwright-report/report.json || echo "No tests found"
            echo ""
            echo "=== First 1000 characters of report.json ==="
            head -c 1000 playwright-report/report.json
            echo ""
            echo "=== Last 1000 characters of report.json ==="
            tail -c 1000 playwright-report/report.json
          else
            echo "report.json not found!"
          fi
    
      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-main
          path: playwright-report/
          retention-days: 7

      - name: Make extract script executable
        run: chmod +x ./extract_playwright_main.sh

      - name: Extract test summary
        id: summary
        run: |
          echo "=== Running extract script ==="
          ./extract_playwright_main.sh playwright-report/report.json
          echo ""
          echo "=== Debug: Raw jq output ==="
          jq -r '
          .suites[]
          | . as $suite
          | .specs[]
          | . as $spec
          | .tests[]
          | . as $test
          | $test.results[]
          | [
              $suite.title,
              $spec.title,
              $test.title,
              ($test.projectName // $test.projectId),
              .status,
              (.retry // 0),
              (.duration // 0),
              (.errors[0].message // "")
            ] | join("|")
          ' playwright-report/report.json | head -10
          echo ""
          echo "=== Extracting summary for Slack ==="
          {
            echo 'summary<<EOF'
            ./extract_playwright_main.sh playwright-report/report.json
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Send Slack notification
        run: |
          ARTIFACT_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
      
          # Use a safe HEREDOC to handle multiline summary
          SUMMARY=$(cat <<'EOF'
          ${{ steps.summary.outputs.summary }}
          EOF
          )
      
          PAYLOAD=$(jq -n \
            --arg summary "$SUMMARY" \
            --arg url "$ARTIFACT_URL" \
            --arg repo "$GITHUB_REPOSITORY" \
            '{
              attachments: [
                      { color: "#36a64f", title: ("Main Test Suite Results for " + $repo), text: $summary },
                      { color: "#439FE0", text: "<\($url)|Download HTML Report Artifacts>" }
                    ]
                  }'
                )

          curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" ${{ secrets.SLACK_WEBHOOK_URL }}

